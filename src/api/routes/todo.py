"""
Routes Todo - Couche API (Clean Architecture)

Ce module expose les endpoints REST pour la gestion des todos avec authentification JWT.
Tous les endpoints n√©cessitent une authentification valide et des scopes sp√©cifiques.

Endpoints disponibles :
- GET /todos/all : Liste toutes les todos de l'utilisateur
- GET /todos/{id} : R√©cup√®re une todo sp√©cifique
- POST /todos/create : Cr√©e une nouvelle todo
- PATCH /todos/{id} : Mise √† jour partielle d'une todo
- DELETE /todos/delete?id={id} : Supprime une todo

S√©curit√© impl√©ment√©e :
- Authentification JWT obligatoire sur tous les endpoints
- Scopes granulaires (read, write, delete)
- Isolation stricte par propri√©taire (owner_id)
- Validation des donn√©es avec Pydantic
- Codes d'erreur HTTP appropri√©s

Principes Clean Architecture :
- D√©pend uniquement de la couche Application (Use Cases)
- Convertit HTTP ‚Üî DTOs m√©tier
- G√®re authentification et autorisation
- Ne conna√Æt pas les d√©tails de persistance
"""

from typing import List
from fastapi import (
    APIRouter,
    Path,
    HTTPException,
    Security,
    status,
    Body,
    Depends,
    Query,
)

# Imports Application (Use Cases et DTOs)
from src.application.use_cases.todo_use_cases import TodoUseCases
from src.application.dtos.todo_dto import TodoCreateDTO, TodoUpdateDTO, TodoResponseDTO

# Imports API (d√©pendances et s√©curit√©)
from src.api.dependencies import get_todo_use_cases, get_current_user
from src.infrastructure.security.jwt import TokenData

# Router avec pr√©fixe pour grouper tous les endpoints todos
router = APIRouter(prefix="/todos", tags=["todos"])


# ===== ENDPOINTS DE CONSULTATION =====

@router.get(
    "/all",
    response_model=List[TodoResponseDTO],
    status_code=status.HTTP_200_OK,
    summary="Liste toutes mes todos",
    description="R√©cup√®re toutes les todos appartenant √† l'utilisateur connect√©"
)
async def get_all_todos(
    use_cases: TodoUseCases = Depends(get_todo_use_cases),
    current_user: TokenData = Security(get_current_user, scopes=["todos:read"]),
):
    """
    Endpoint pour r√©cup√©rer toutes les todos de l'utilisateur connect√©.

    üõ°Ô∏è S√âCURIT√â :
    - Authentification JWT obligatoire
    - Scope 'todos:read' requis
    - Isolation par owner_id (utilisateur ne voit que ses todos)

    üîÑ WORKFLOW :
    1. Validation du token JWT et du scope
    2. Extraction user_id depuis le token
    3. R√©cup√©ration des todos via Use Cases
    4. Conversion entit√©s ‚Üí DTOs pour la r√©ponse

    Args:
        use_cases (TodoUseCases): Use cases inject√©s pour la logique m√©tier
        current_user (TokenData): Donn√©es utilisateur extraites du JWT

    Returns:
        List[TodoResponseDTO]: Liste des todos de l'utilisateur (peut √™tre vide)

    Raises:
        HTTPException 401: Token invalide ou expir√©
        HTTPException 403: Scope insuffisant

    Example:
        GET /todos/all
        Authorization: Bearer eyJ0eXAiOiJKV1Q...

        Response: [
            {
                "id": 1,
                "title": "Ma premi√®re t√¢che",
                "description": "Description de la t√¢che",
                "priority": 2,
                "completed": false,
                "owner_id": 1
            }
        ]
    """
    return await use_cases.get_all_todos_by_owner(current_user.user_id)


@router.get(
    "/{todo_id}",
    response_model=TodoResponseDTO,
    status_code=status.HTTP_200_OK,
    summary="R√©cup√®re une todo sp√©cifique",
    description="R√©cup√®re le d√©tail d'une todo par son ID (seulement si elle appartient √† l'utilisateur)"
)
async def get_todo(
    todo_id: int = Path(..., gt=0, description="ID de la todo √† r√©cup√©rer"),
    use_cases: TodoUseCases = Depends(get_todo_use_cases),
    current_user: TokenData = Security(get_current_user, scopes=["todos:read"]),
):
    """
    Endpoint pour r√©cup√©rer une todo sp√©cifique par son ID.

    üõ°Ô∏è S√âCURIT√â :
    - Authentification JWT obligatoire
    - Scope 'todos:read' requis
    - V√©rification double : ID + owner_id
    - Erreur 404 si todo inexistante OU appartenant √† un autre utilisateur

    üîÑ WORKFLOW :
    1. Validation du token JWT et du scope
    2. Validation de l'ID (doit √™tre > 0)
    3. R√©cup√©ration s√©curis√©e via Use Cases (ID + owner_id)
    4. Retour 404 si non trouv√©e ou pas propri√©taire

    Args:
        todo_id (int): Identifiant de la todo (valid√© > 0)
        use_cases (TodoUseCases): Use cases pour la logique m√©tier
        current_user (TokenData): Donn√©es utilisateur du JWT

    Returns:
        TodoResponseDTO: Donn√©es compl√®tes de la todo

    Raises:
        HTTPException 401: Token invalide
        HTTPException 403: Scope insuffisant
        HTTPException 404: Todo inexistante ou pas propri√©taire
        HTTPException 422: ID invalide (‚â§ 0)

    Example:
        GET /todos/1
        Authorization: Bearer eyJ0eXAiOiJKV1Q...
    """
    todo = await use_cases.get_todo_by_id_and_owner(todo_id, current_user.user_id)
    if not todo:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Todo not found or not yours"
        )
    return todo


# ===== ENDPOINTS DE MODIFICATION =====

@router.post(
    "/create",
    response_model=TodoResponseDTO,
    status_code=status.HTTP_201_CREATED,
    summary="Cr√©e une nouvelle todo",
    description="Cr√©e une nouvelle todo avec les donn√©es fournies"
)
async def create_todo(
    use_cases: TodoUseCases = Depends(get_todo_use_cases),
    current_user: TokenData = Security(get_current_user, scopes=["todos:write"]),
    todo_create: TodoCreateDTO = Body(..., description="Donn√©es de la todo √† cr√©er"),
):
    """
    Endpoint pour cr√©er une nouvelle todo.

    üõ°Ô∏è S√âCURIT√â :
    - Authentification JWT obligatoire
    - Scope 'todos:write' requis
    - owner_id automatiquement assign√© depuis le token

    üìù VALIDATION :
    - Titre : 3-50 caract√®res obligatoire
    - Description : 3-100 caract√®res obligatoire
    - Priorit√© : 1-5 (d√©faut: 1)
    - Completed : d√©faut false

    üîÑ WORKFLOW :
    1. Validation du token JWT et du scope
    2. Validation des donn√©es avec TodoCreateDTO
    3. Cr√©ation via Use Cases avec owner_id automatique
    4. Retour de la todo cr√©√©e avec son ID g√©n√©r√©

    Args:
        use_cases (TodoUseCases): Use cases pour la logique m√©tier
        current_user (TokenData): Donn√©es utilisateur du JWT
        todo_create (TodoCreateDTO): Donn√©es valid√©es de la todo

    Returns:
        TodoResponseDTO: Todo cr√©√©e avec ID g√©n√©r√©

    Raises:
        HTTPException 401: Token invalide
        HTTPException 403: Scope insuffisant
        HTTPException 422: Donn√©es invalides

    Example:
        POST /todos/create
        Authorization: Bearer eyJ0eXAiOiJKV1Q...

        {
            "title": "Nouvelle t√¢che",
            "description": "Description de la t√¢che",
            "priority": 3,
            "completed": false
        }
    """
    return await use_cases.create_todo(todo_create, current_user.user_id)


@router.patch(
    "/{todo_id}",
    response_model=TodoResponseDTO,
    status_code=status.HTTP_200_OK,
    summary="Mise √† jour partielle d'une todo",
    description="Met √† jour seulement les champs fournis. Les autres restent inchang√©s."
)
async def update_todo(
    todo_id: int = Path(..., gt=0, description="ID de la todo √† modifier"),
    use_cases: TodoUseCases = Depends(get_todo_use_cases),
    current_user: TokenData = Security(get_current_user, scopes=["todos:write"]),
    todo_update: TodoUpdateDTO = Body(..., description="Champs √† mettre √† jour (tous optionnels)"),
):
    """
    Endpoint pour la mise √† jour partielle d'une todo (PATCH).

    üéØ FONCTIONNALIT√â CL√â : MISE √Ä JOUR PARTIELLE
    - Seuls les champs fournis sont mis √† jour
    - Les champs non fournis restent inchang√©s
    - Id√©al pour les interfaces utilisateur granulaires

    üõ°Ô∏è S√âCURIT√â :
    - Authentification JWT obligatoire
    - Scope 'todos:write' requis
    - V√©rification propri√©t√© (ID + owner_id)
    - Erreur 404 si inexistante ou pas propri√©taire

    üìù CHAMPS OPTIONNELS :
    - title : 3-50 caract√®res si fourni
    - description : 3-100 caract√®res si fourni
    - priority : 1-5 si fourni
    - completed : boolean si fourni

    üîÑ WORKFLOW :
    1. Validation du token JWT et du scope
    2. Validation de l'ID (> 0)
    3. Validation des champs fournis avec TodoUpdateDTO
    4. Mise √† jour partielle via Use Cases
    5. Retour de la todo mise √† jour

    Args:
        todo_id (int): Identifiant de la todo (> 0)
        use_cases (TodoUseCases): Use cases pour la logique m√©tier
        current_user (TokenData): Donn√©es utilisateur du JWT
        todo_update (TodoUpdateDTO): Champs √† mettre √† jour (optionnels)

    Returns:
        TodoResponseDTO: Todo mise √† jour avec nouveaux champs

    Raises:
        HTTPException 401: Token invalide
        HTTPException 403: Scope insuffisant
        HTTPException 404: Todo inexistante ou pas propri√©taire
        HTTPException 422: Donn√©es invalides

    Examples:
        # Changer seulement le titre
        PATCH /todos/1
        {"title": "Nouveau titre"}

        # Marquer comme termin√©e
        PATCH /todos/1
        {"completed": true}

        # Changer titre et priorit√©
        PATCH /todos/1
        {"title": "Urgent!", "priority": 5}
    """
    todo = await use_cases.update_todo(todo_id, todo_update, current_user.user_id)
    if not todo:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Todo not found or not yours"
        )
    return todo


# ===== ENDPOINTS DE SUPPRESSION =====

@router.delete(
    "/delete",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Supprime une todo",
    description="Supprime d√©finitivement une todo (action irr√©versible)"
)
async def delete_todo(
    id: int = Query(..., gt=0, description="ID de la todo √† supprimer"),
    use_cases: TodoUseCases = Depends(get_todo_use_cases),
    current_user: TokenData = Security(get_current_user, scopes=["todos:delete"]),
):
    """
    Endpoint pour supprimer d√©finitivement une todo.

    ‚ö†Ô∏è SUPPRESSION D√âFINITIVE : Cette action est irr√©versible !

    üõ°Ô∏è S√âCURIT√â :
    - Authentification JWT obligatoire
    - Scope 'todos:delete' requis (diff√©rent de write)
    - V√©rification propri√©t√© avant suppression
    - Erreur 404 si inexistante ou pas propri√©taire

    üîÑ WORKFLOW :
    1. Validation du token JWT et du scope sp√©cial 'delete'
    2. Validation de l'ID (> 0)
    3. V√©rification propri√©t√© via Use Cases
    4. Suppression d√©finitive si valid√©e
    5. Retour 204 No Content (succ√®s sans donn√©es)

    Args:
        id (int): Identifiant de la todo √† supprimer (> 0)
        use_cases (TodoUseCases): Use cases pour la logique m√©tier
        current_user (TokenData): Donn√©es utilisateur du JWT

    Returns:
        None: Statut 204 No Content (pas de body de r√©ponse)

    Raises:
        HTTPException 401: Token invalide
        HTTPException 403: Scope insuffisant (besoin todos:delete)
        HTTPException 404: Todo inexistante ou pas propri√©taire
        HTTPException 422: ID invalide (‚â§ 0)

    Example:
        DELETE /todos/delete?id=1
        Authorization: Bearer eyJ0eXAiOiJKV1Q...

        Response: 204 No Content (pas de body)

    Note:
        Le scope 'todos:delete' est distinct de 'todos:write' pour
        permettre un contr√¥le granulaire des permissions.
    """
    deleted = await use_cases.delete_todo(id, current_user.user_id)
    if not deleted:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Todo not found or not yours"
        )
