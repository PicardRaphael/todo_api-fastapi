"""
Routes d'Authentification - Couche API (Clean Architecture)

Ce module expose les endpoints REST pour l'authentification des utilisateurs :
- POST /register : Inscription d'un nouvel utilisateur
- POST /token : Connexion et g√©n√©ration de token JWT

S√©curit√© impl√©ment√©e :
- Validation Pydantic des donn√©es entrantes
- Hachage bcrypt des mots de passe (jamais en clair)
- Tokens JWT avec expiration et scopes
- V√©rification unicit√© email/username
- Mise √† jour timestamp de derni√®re connexion

Principes Clean Architecture :
- D√©pend uniquement de la couche Application (Use Cases)
- Convertit entre HTTP et objets m√©tier (DTOs)
- G√®re les codes de statut et erreurs HTTP
- Ne conna√Æt pas les d√©tails de persistance
"""

from datetime import timedelta
from typing import Annotated
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from starlette import status

# Imports Infrastructure (inject√©s via d√©pendances)
from src.infrastructure.database.sqlite.config import get_db
from src.infrastructure.database.sqlite.user_repository import SQLiteUserRepository
from src.infrastructure.security.jwt import (
    Token,
    create_access_token,
    verify_password,
)
from src.infrastructure.config import get_settings

# Imports Domain (entit√©s m√©tier)
from src.domain.entities.user import User

# Imports Application (DTOs et Use Cases)
from src.application.dtos.user_dto import UserCreateDTO, UserResponseDTO
from src.application.use_cases.user_use_cases import UserUseCases

# Configuration globale de l'application
settings = get_settings()

# Router FastAPI avec tag pour regrouper dans la documentation
router = APIRouter(tags=["authentication"])


# ===== INJECTION DE D√âPENDANCES =====

async def get_user_use_cases(db: Session = Depends(get_db)):
    """
    Factory pour cr√©er une instance des Use Cases User.

    Cette fonction impl√©mente l'injection de d√©pendance :
    1. R√©cup√®re une session de base de donn√©es
    2. Cr√©e le repository SQLite avec cette session
    3. Injecte le repository dans les Use Cases

    Pattern Dependency Injection :
    - Respecte l'inversion de d√©pendance (DIP)
    - Facilite les tests (mock des d√©pendances)
    - Permet de changer d'impl√©mentation facilement

    Args:
        db (Session): Session SQLAlchemy inject√©e par FastAPI

    Returns:
        UserUseCases: Instance configur√©e avec le repository SQLite
    """
    repo = SQLiteUserRepository(db)
    return UserUseCases(repo)


# ===== ENDPOINTS D'AUTHENTIFICATION =====

@router.post(
    "/register",
    response_model=UserResponseDTO,
    status_code=status.HTTP_201_CREATED,
    summary="Inscription d'un nouvel utilisateur",
    description="Cr√©e un compte utilisateur avec email, username et mot de passe"
)
async def register_user(
    user_data: UserCreateDTO,
    use_cases: UserUseCases = Depends(get_user_use_cases)
):
    """
    Endpoint d'inscription pour cr√©er un nouveau compte utilisateur.

    üîÑ WORKFLOW D'INSCRIPTION :
    1. Validation des donn√©es avec UserCreateDTO (Pydantic)
    2. V√©rification unicit√© email et username
    3. Hachage s√©curis√© du mot de passe (bcrypt)
    4. Cr√©ation de l'utilisateur en base
    5. Retour des donn√©es publiques (sans mot de passe)

    üõ°Ô∏è S√âCURIT√â :
    - Email et username uniques (pr√©vient les doublons)
    - Mot de passe hash√© avec bcrypt (jamais stock√© en clair)
    - Validation format email avec EmailStr
    - Donn√©es sensibles filtr√©es dans la r√©ponse

    Args:
        user_data (UserCreateDTO): Donn√©es d'inscription valid√©es par Pydantic
        use_cases (UserUseCases): Use cases inject√©s pour la logique m√©tier

    Returns:
        UserResponseDTO: Donn√©es publiques de l'utilisateur cr√©√© (sans mot de passe)

    Raises:
        HTTPException 400: Email d√©j√† utilis√©
        HTTPException 400: Username d√©j√† pris
        HTTPException 400: Erreur de validation
        HTTPException 500: Erreur serveur

    Example:
        POST /register
        {
            "email": "user@example.com",
            "username": "monusername",
            "password": "motdepasse123"
        }
    """
    # V√©rification unicit√© email - pr√©vient les comptes multiples
    if await use_cases.get_user_by_email(user_data.email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )

    # V√©rification unicit√© username - pr√©vient les conflits d'identification
    if await use_cases.get_user_by_username(user_data.username):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already taken"
        )

    try:
        # Cr√©ation de l'utilisateur via Use Cases (logique m√©tier)
        created_user = await use_cases.register_user(user_data)

        # Conversion entit√© ‚Üí DTO pour la r√©ponse (filtre les donn√©es sensibles)
        return UserResponseDTO.model_validate(created_user)

    except ValueError as e:
        # Erreurs m√©tier remont√©es par les Use Cases
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )


@router.post(
    "/token",
    response_model=Token,
    summary="Connexion utilisateur",
    description="Authentifie un utilisateur et retourne un token JWT avec scopes"
)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],
    use_cases: UserUseCases = Depends(get_user_use_cases),
):
    """
    Endpoint de connexion g√©n√©rant un token JWT pour l'authentification.

    üîÑ WORKFLOW DE CONNEXION :
    1. R√©cup√©ration utilisateur par username
    2. V√©rification mot de passe avec bcrypt
    3. Contr√¥le statut actif du compte
    4. Mise √† jour timestamp derni√®re connexion
    5. G√©n√©ration token JWT avec scopes
    6. Retour du token avec type "bearer"

    üõ°Ô∏è S√âCURIT√â JWT :
    - Token avec expiration configurable (d√©faut 30min)
    - Scopes granulaires pour les permissions
    - Signature cryptographique (HS256)
    - Format Bearer standard OAuth2

    üìä SCOPES INCLUS :
    - todos:read : Lecture des todos
    - todos:write : Cr√©ation/modification des todos
    - todos:delete : Suppression des todos
    - admin : Privil√®ges administrateur (si superuser)

    Args:
        form_data (OAuth2PasswordRequestForm): Formulaire standard OAuth2
            (username + password via form-data)
        use_cases (UserUseCases): Use cases pour la logique d'authentification

    Returns:
        Token: Objet contenant access_token et token_type

    Raises:
        HTTPException 401: Identifiants incorrects
        HTTPException 400: Compte d√©sactiv√©
        HTTPException 500: Erreur serveur

    Example:
        POST /token
        Content-Type: application/x-www-form-urlencoded

        username=monusername&password=motdepasse123

    Response:
        {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGc...",
            "token_type": "bearer"
        }
    """
    # √âtape 1 : R√©cup√©ration de l'utilisateur
    user = await use_cases.get_user_by_username(form_data.username)

    # √âtape 2 : V√©rification des identifiants
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},  # Standard OAuth2
        )

    # √âtape 3 : V√©rification statut du compte
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )

    # √âtape 4 : Mise √† jour derni√®re connexion (audit + s√©curit√©)
    if user.id is not None:
        await use_cases.update_last_login(user.id)

    # √âtape 5 : Configuration des scopes (permissions)
    scopes = ["todos:read", "todos:write", "todos:delete"]
    if user.is_superuser:
        scopes.append("admin")  # Privil√®ges administrateur

    # √âtape 6 : G√©n√©ration du token JWT
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={
            "sub": user.username,  # Subject = identifiant utilisateur
            "scopes": scopes       # Permissions accord√©es
        },
        expires_delta=access_token_expires
    )

    # Retour du token au format OAuth2 standard
    return Token(access_token=access_token, token_type="bearer")
