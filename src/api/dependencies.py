"""
D√©pendances FastAPI - Couche API (Clean Architecture)

Ce module centralise toutes les d√©pendances inject√©es par FastAPI :
- Authentification et autorisation JWT
- Injection des Use Cases avec repositories
- Validation des scopes et permissions
- Gestion des erreurs d'authentification

Pattern Dependency Injection :
- Respecte l'inversion de d√©pendance (DIP)
- Facilite les tests unitaires (mock dependencies)
- Centralise la configuration des d√©pendances
- Permet la composition modulaire des services

S√©curit√© int√©gr√©e :
- Validation JWT automatique
- V√©rification des scopes granulaires
- Gestion des erreurs standardis√©e
- Extraction s√©curis√©e de l'user_id

Utilisation dans les routes :
- current_user = Security(get_current_user, scopes=["todos:read"])
- use_cases = Depends(get_todo_use_cases)
"""

from typing import Generator, Annotated, Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, SecurityScopes, HTTPBearer
from sqlalchemy.orm import Session

# Imports Infrastructure (base de donn√©es et s√©curit√©)
from src.infrastructure.database.sqlite.config import get_db
from src.infrastructure.database.sqlite.repository import SQLiteTodoRepository
from src.infrastructure.database.sqlite.user_repository import SQLiteUserRepository

# Imports Application (Use Cases)
from src.application.use_cases.todo_use_cases import TodoUseCases
from src.application.use_cases.auth_use_cases import AuthUseCases

# Imports S√©curit√© (JWT)
from src.infrastructure.auth.jwt_service import JWTService, verify_token, TokenData

# Imports exceptions JWT
from src.shared.exceptions.auth import (
    InvalidTokenError,
    ExpiredTokenError,
    MissingTokenError,
)


# ===== SCH√âMAS D'AUTHENTIFICATION =====

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="/token",  # URL pour obtenir le token (endpoint /token)
    scopes={
        # Scopes granulaires pour contr√¥ler les permissions
        "todos:read": "Lecture des todos (GET)",
        "todos:write": "Cr√©ation et modification des todos (POST, PATCH)",
        "todos:delete": "Suppression des todos (DELETE)",
        "admin": "Acc√®s administrateur (toutes op√©rations)",
    },
)
"""
Sch√©ma OAuth2 principal pour l'authentification JWT.

Configuration :
- tokenUrl="/token" : URL pour obtenir un token d'acc√®s
- scopes : Permissions granulaires pour contr√¥ler l'acc√®s

Int√©gration Swagger UI :
- Bouton "Authorize" automatique dans /docs
- Formulaire username/password standard OAuth2
- S√©lection des scopes requis

Utilisation dans les routes :
    current_user = Security(get_current_user, scopes=["todos:read"])
"""

bearer_scheme = HTTPBearer()
"""
Sch√©ma Bearer alternatif pour les tests manuels.

Plus simple que OAuth2 pour :
- Tests avec curl/Postman
- D√©bogage manuel
- Int√©gration avec outils tiers

Utilisation :
    Authorization: Bearer <token_jwt>
"""


# ===== D√âPENDANCES D'AUTHENTIFICATION =====


async def get_current_user(
    security_scopes: SecurityScopes,
    token: Annotated[str, Depends(oauth2_scheme)],
    db: Session = Depends(get_db),
) -> TokenData:
    """
    D√©pendance centrale pour l'authentification et l'autorisation.

    üõ°Ô∏è PROCESSUS D'AUTHENTIFICATION :
    1. Extraction du token JWT depuis l'header Authorization
    2. Validation de la signature et de l'expiration
    3. R√©cup√©ration de l'utilisateur depuis la base de donn√©es
    4. V√©rification des scopes requis pour l'endpoint
    5. Enrichissement du TokenData avec l'user_id

    üîê S√âCURIT√â MULTI-NIVEAUX :
    - Token JWT sign√© cryptographiquement
    - V√©rification d'expiration automatique
    - Validation de l'existence de l'utilisateur
    - Contr√¥le granulaire des permissions (scopes)
    - Messages d'erreur standardis√©s pour la s√©curit√©

    üìä SCOPES SUPPORT√âS :
    - todos:read : Lecture des todos (GET /todos/*)
    - todos:write : Cr√©ation/modification (POST, PATCH /todos/*)
    - todos:delete : Suppression (DELETE /todos/*)
    - admin : Acc√®s administrateur (toutes op√©rations)

    Args:
        security_scopes (SecurityScopes): Scopes requis par l'endpoint appelant
        token (str): Token JWT extrait de l'header Authorization
        db (Session): Session de base de donn√©es pour v√©rifier l'utilisateur

    Returns:
        TokenData: Donn√©es utilisateur avec user_id, username et scopes valid√©s

    Raises:
        MissingTokenError: Si le token n'est pas fourni ou est vide
        InvalidTokenError: Si le token est malform√© ou l'utilisateur n'existe pas
        ExpiredTokenError: Si le token a expir√©
        HTTPException 403: Scopes insuffisants pour l'op√©ration demand√©e

    Usage dans les routes :
        @router.get("/todos/all")
        async def get_todos(
            current_user: TokenData = Security(get_current_user, scopes=["todos:read"])
        ):
            # current_user.user_id est maintenant disponible
            todos = await use_cases.get_all_todos_by_owner(current_user.user_id)

    Note sur la s√©curit√© :
        Les messages d'erreur sont volontairement g√©n√©riques pour √©viter
        de donner des informations aux attaquants (user enumeration).
    """
    # Configuration du header WWW-Authenticate pour les erreurs 401
    if security_scopes.scopes:
        # Format OAuth2 standard avec scopes requis
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        # Format Bearer simple sans scopes
        authenticate_value = "Bearer"

    try:
        # √âtape 1 : Validation du token JWT (signature, expiration, format)
        token_data = verify_token(token)

        # √âtape 2 : V√©rification de l'existence de l'utilisateur en base
        if not token_data.username:
            raise InvalidTokenError("Token does not contain valid user information")

        user_repo = SQLiteUserRepository(db)
        user = await user_repo.get_user_by_username(token_data.username)
        if not user:
            # Utilisateur supprim√© ou d√©sactiv√© depuis la g√©n√©ration du token
            raise InvalidTokenError("User associated with token no longer exists")

    except (InvalidTokenError, ExpiredTokenError, MissingTokenError):
        # Les exceptions JWT remontent directement avec leurs messages sp√©cifiques
        raise
    except Exception:
        # Fallback pour autres erreurs non pr√©vues
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication failed",
            headers={"WWW-Authenticate": authenticate_value},
        )

    # √âtape 3 : Enrichissement avec l'user_id pour les Use Cases
    token_data.user_id = user.id

    # √âtape 4 : V√©rification des scopes (permissions granulaires)
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            # Permissions insuffisantes pour cette op√©ration
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": authenticate_value},
            )

    return token_data


async def get_optional_current_user(
    token: Optional[str] = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> Optional[TokenData]:
    """
    D√©pendance pour l'authentification optionnelle.

    Similaire √† get_current_user mais ne l√®ve pas d'exception si le token est absent.
    Utile pour les endpoints qui fonctionnent avec ou sans authentification.

    Args:
        token (str, optional): Token JWT optionnel
        db (Session): Session de base de donn√©es

    Returns:
        TokenData | None: Donn√©es utilisateur si token valide, None sinon

    Raises:
        InvalidTokenError: Si le token fourni est malform√©
        ExpiredTokenError: Si le token fourni a expir√©
    """
    if not token:
        return None

    try:
        # Utilise la m√™me logique que get_current_user mais sans scopes
        token_data = verify_token(token)

        if not token_data.username:
            raise InvalidTokenError("Token does not contain valid user information")

        user_repo = SQLiteUserRepository(db)
        user = await user_repo.get_user_by_username(token_data.username)
        if not user:
            raise InvalidTokenError("User associated with token no longer exists")

        token_data.user_id = user.id
        return token_data

    except (InvalidTokenError, ExpiredTokenError, MissingTokenError):
        # Les exceptions remontent pour informer le client du probl√®me
        raise


# ===== D√âPENDANCES M√âTIER =====


def get_todo_use_cases(
    db: Annotated[Session, Depends(get_db)],
) -> TodoUseCases:
    """
    Factory pour cr√©er une instance des Use Cases Todo avec injection de d√©pendances.

    üèóÔ∏è PATTERN DEPENDENCY INJECTION :
    1. Injection de la session de base de donn√©es
    2. Cr√©ation du repository SQLite avec cette session
    3. Injection du repository dans les Use Cases
    4. Retour de l'instance configur√©e

    ‚úÖ AVANTAGES :
    - Respecte l'inversion de d√©pendance (DIP)
    - Facilite les tests unitaires (mock du repository)
    - Permet de changer d'impl√©mentation facilement
    - Scope de vie g√©r√© par FastAPI (une instance par requ√™te)
    - Type safety avec annotations compl√®tes

    üîÑ LIFECYCLE :
    - Cr√©√© √† chaque requ√™te HTTP
    - Session DB ferm√©e automatiquement en fin de requ√™te
    - Garbage collection automatique des objets
    - Thread-safe par design (pas de partage d'√©tat)

    Args:
        db (Session): Session SQLAlchemy inject√©e automatiquement par get_db()

    Returns:
        TodoUseCases: Instance configur√©e avec le repository SQLite

    Usage dans les routes :
        @router.get("/todos/all")
        async def get_todos(
            use_cases: TodoUseCases = Depends(get_todo_use_cases),
            current_user: TokenData = Security(get_current_user, scopes=["todos:read"])
        ):
            return await use_cases.get_all_todos_by_owner(current_user.user_id)

    Tests unitaires :
        # Mock de la d√©pendance pour les tests
        app.dependency_overrides[get_todo_use_cases] = lambda: MockTodoUseCases()

    Note architecturale :
        Cette fonction respecte la Clean Architecture en ne cr√©ant que
        des instances de la couche Application, sans d√©pendance directe
        vers les d√©tails techniques (SQLAlchemy, FastAPI, etc.)
    """
    # Cr√©ation du repository avec la session inject√©e
    todo_repository = SQLiteTodoRepository(db)

    # Injection du repository dans les Use Cases (inversion de d√©pendance)
    return TodoUseCases(todo_repository)


def get_auth_use_cases(
    db: Annotated[Session, Depends(get_db)],
) -> AuthUseCases:
    """
    Factory pour cr√©er une instance des Use Cases Auth avec injection de d√©pendances.

    Args:
        db (Session): Session SQLAlchemy inject√©e automatiquement par get_db()

    Returns:
        AuthUseCases: Instance configur√©e avec les services requis
    """
    from src.infrastructure.auth.jwt_service import JWTService
    from src.infrastructure.auth.password_service import PasswordService

    # Cr√©ation du repository avec la session inject√©e
    user_repository = SQLiteUserRepository(db)

    # Cr√©ation des services requis
    jwt_service = JWTService()
    password_service = PasswordService()

    # Injection de toutes les d√©pendances dans les Use Cases
    return AuthUseCases(user_repository, jwt_service, password_service)
