"""
Use Cases Todo - Couche Application (Clean Architecture)

Cette classe impl√©mente la logique m√©tier de l'application Todo.
Elle orchestre les interactions entre les DTOs (API) et les entit√©s (Domain).

Responsabilit√©s des Use Cases :
- Logique m√©tier pure (sans d√©pendance technique)
- Orchestration des entit√©s et repositories
- Conversion entre DTOs et entit√©s
- Validation des r√®gles business
- Gestion de la s√©curit√© (isolation par owner_id)

Position dans Clean Architecture :
- D√©pend de : Domain Layer (entit√©s, repositories)
- Utilis√© par : API Layer (routes FastAPI)
- Ne conna√Æt pas : Base de donn√©es, HTTP, JWT (d√©tails techniques)

Pattern Use Case :
- Un use case = une action m√©tier (cr√©er, lire, modifier, supprimer)
- Chaque m√©thode repr√©sente un cas d'utilisation sp√©cifique
- R√©utilisable pour diff√©rentes interfaces (REST, GraphQL, CLI, etc.)
"""

from typing import List, Optional

from src.domain.entities.todo import Todo
from src.domain.repositories.todo_repository import TodoRepository
from src.application.dtos.todo_dto import TodoCreateDTO, TodoUpdateDTO
from src.shared.exceptions.domain.todo import (
    TodoNotFoundError,
    TodoAccessDeniedError,
    InvalidPriorityError,
)


class TodoUseCases:
    """
    Orchestrateur de la logique m√©tier pour la gestion des todos.

    Cette classe centralise tous les cas d'utilisation li√©s aux todos :
    - Consultation (avec s√©curit√© par propri√©taire)
    - Cr√©ation (avec attribution automatique du propri√©taire)
    - Mise √† jour partielle (avec validation de propri√©t√©)
    - Suppression (avec validation de propri√©t√©)

    Principes appliqu√©s :
    - Injection de d√©pendance (repository inject√©)
    - S√©curit√© by design (toujours v√©rifier owner_id)
    - Single Responsibility (chaque m√©thode = 1 cas d'usage)
    - Clean Architecture (pas de d√©pendance technique)

    Threading Safety : ‚ö†Ô∏è Cette classe n'est PAS thread-safe.
    Cr√©ez une nouvelle instance par requ√™te (FastAPI le fait automatiquement).
    """

    def __init__(self, todo_repository: TodoRepository):
        """
        Initialise les use cases avec injection de d√©pendance.

        Le repository est inject√© depuis la couche Infrastructure,
        respectant ainsi le principe d'inversion de d√©pendance (DIP).

        Args:
            todo_repository (TodoRepository): Impl√©mentation concr√®te du repository
                (ex: SQLiteTodoRepository, PostgreSQLTodoRepository, etc.)
        """
        self.todo_repository = todo_repository

    # ===== CONSULTATION S√âCURIS√âE =====

    async def get_all_todos_by_owner(self, owner_id: int) -> List[Todo]:
        """
        R√©cup√®re toutes les todos d'un utilisateur sp√©cifique.

        üõ°Ô∏è S√âCURIT√â : Isolation stricte par propri√©taire.
        Un utilisateur ne peut voir que ses propres todos.

        Use Case : "En tant qu'utilisateur, je veux voir toutes mes t√¢ches"

        Args:
            owner_id (int): Identifiant de l'utilisateur connect√© (extrait du JWT)

        Returns:
            List[Todo]: Liste des todos de l'utilisateur (peut √™tre vide)

        Note:
            Cette m√©thode ne lance jamais d'exception, retourne une liste vide
            si l'utilisateur n'a aucune todo.
        """
        return await self.todo_repository.get_all_by_owner(owner_id)

    async def get_todo_by_id_and_owner(self, todo_id: int, owner_id: int) -> Todo:
        """
        R√©cup√®re une todo sp√©cifique appartenant √† un utilisateur.

        üõ°Ô∏è S√âCURIT√â : Double v√©rification (ID + propri√©taire).
        Emp√™che l'acc√®s aux todos d'autres utilisateurs m√™me avec un ID valide.

        Use Case : "En tant qu'utilisateur, je veux voir le d√©tail d'une de mes t√¢ches"

        Args:
            todo_id (int): Identifiant de la todo
            owner_id (int): Identifiant de l'utilisateur connect√©

        Returns:
            Todo: La todo trouv√©e et appartenant √† l'utilisateur

        Raises:
            TodoNotFoundError: Si la todo n'existe pas ou n'appartient pas √† l'utilisateur
        """
        todo = await self.todo_repository.get_by_id_and_owner(todo_id, owner_id)
        if not todo:
            raise TodoNotFoundError(todo_id=todo_id, owner_id=owner_id)
        return todo

    # ===== CR√âATION =====

    async def create_todo(self, todo_create: TodoCreateDTO, owner_id: int) -> Todo:
        """
        Cr√©e une nouvelle todo pour un utilisateur.

        üîÑ CONVERSION DTO ‚Üí ENTIT√â :
        1. Valide les donn√©es avec TodoCreateDTO
        2. Valide la priorit√© si fournie
        3. Convertit le DTO en entit√© Todo
        4. Ajoute automatiquement l'owner_id
        5. Persiste via le repository

        Use Case : "En tant qu'utilisateur, je veux cr√©er une nouvelle t√¢che"

        Args:
            todo_create (TodoCreateDTO): Donn√©es valid√©es de la todo √† cr√©er
            owner_id (int): Identifiant de l'utilisateur cr√©ateur

        Returns:
            Todo: La todo cr√©√©e avec son ID g√©n√©r√© par la DB

        Raises:
            InvalidPriorityError: Si la priorit√© est invalide
            Exception: En cas d'erreur de persistance

        Note:
            L'ID est automatiquement g√©n√©r√© (None en entr√©e).
            L'owner_id est automatiquement assign√© (s√©curit√©).
        """
        # Validation de la priorit√© si fournie
        if todo_create.priority is not None:
            self._validate_priority(todo_create.priority)

        # Conversion DTO ‚Üí Entit√© avec ajout de l'owner_id
        todo = Todo(id=None, owner_id=owner_id, **todo_create.model_dump())
        return await self.todo_repository.create(todo)

    # ===== MISE √Ä JOUR PARTIELLE =====

    async def update_todo(
        self, todo_id: int, todo_update: TodoUpdateDTO, owner_id: int
    ) -> Todo:
        """
        Met √† jour partiellement une todo existante.

        üéØ MISE √Ä JOUR PARTIELLE (PATCH) :
        1. V√©rifie que la todo existe et appartient √† l'utilisateur
        2. Valide la priorit√© si fournie dans la mise √† jour
        3. Extrait uniquement les champs fournis (exclude_unset=True)
        4. Fusionne avec les donn√©es existantes (model_copy)
        5. Persiste les modifications

        üõ°Ô∏è S√âCURIT√â : V√©rification de propri√©t√© avant modification.

        Use Case : "En tant qu'utilisateur, je veux modifier certains champs de ma t√¢che"

        Exemples :
        - update_todo(1, {"title": "Nouveau titre"}, user_id) ‚Üí change le titre
        - update_todo(1, {"completed": True}, user_id) ‚Üí marque comme termin√©e
        - update_todo(1, {"priority": 5, "title": "Urgent!"}, user_id) ‚Üí change 2 champs

        Args:
            todo_id (int): Identifiant de la todo √† modifier
            todo_update (TodoUpdateDTO): Donn√©es √† mettre √† jour (champs optionnels)
            owner_id (int): Identifiant du propri√©taire

        Returns:
            Todo: La todo mise √† jour

        Raises:
            TodoNotFoundError: Si la todo n'existe pas ou n'appartient pas √† l'utilisateur
            InvalidPriorityError: Si la priorit√© fournie est invalide

        Workflow d√©taill√© :
            1. R√©cup√©ration s√©curis√©e de la todo existante
            2. Validation de la priorit√© si fournie
            3. Extraction des champs modifi√©s (exclude_unset=True)
            4. Fusion intelligente avec model_copy(update=...)
            5. Persistance via repository
        """
        # √âtape 1 : V√©rification d'existence et de propri√©t√©
        existing_todo = await self.todo_repository.get_by_id_and_owner(
            todo_id, owner_id
        )
        if not existing_todo:
            raise TodoNotFoundError(todo_id=todo_id, owner_id=owner_id)

        # √âtape 2 : Validation de la priorit√© si fournie
        if todo_update.priority is not None:
            self._validate_priority(todo_update.priority)

        # √âtape 3 : Extraction des champs √† mettre √† jour
        # exclude_unset=True ‚Üí uniquement les champs fournis dans la requ√™te
        update_data = todo_update.model_dump(exclude_unset=True)

        # √âtape 4 : Fusion intelligente des donn√©es
        # model_copy(update=...) cr√©e une nouvelle instance avec les champs mis √† jour
        updated_todo = existing_todo.model_copy(update=update_data)

        # √âtape 5 : Persistance
        result = await self.todo_repository.update(todo_id, updated_todo)
        if not result:
            # Cette situation ne devrait pas arriver car on a v√©rifi√© l'existence
            raise TodoNotFoundError(todo_id=todo_id, owner_id=owner_id)
        return result

    # ===== SUPPRESSION =====

    async def delete_todo(self, todo_id: int, owner_id: int) -> None:
        """
        Supprime d√©finitivement une todo.

        üõ°Ô∏è S√âCURIT√â : V√©rification de propri√©t√© avant suppression.
        Emp√™che la suppression des todos d'autres utilisateurs.

        ‚ö†Ô∏è SUPPRESSION D√âFINITIVE : Cette action est irr√©versible.

        Use Case : "En tant qu'utilisateur, je veux supprimer une de mes t√¢ches"

        Args:
            todo_id (int): Identifiant de la todo √† supprimer
            owner_id (int): Identifiant du propri√©taire

        Raises:
            TodoNotFoundError: Si la todo n'existe pas ou n'appartient pas √† l'utilisateur

        Workflow :
            1. V√©rification d'existence et de propri√©t√©
            2. Suppression d√©finitive si valid√©e
        """
        # V√©rification de propri√©t√© avant suppression
        existing_todo = await self.todo_repository.get_by_id_and_owner(
            todo_id, owner_id
        )
        if not existing_todo:
            raise TodoNotFoundError(todo_id=todo_id, owner_id=owner_id)

        # Suppression d√©finitive
        await self.todo_repository.delete(todo_id)

    # ===== M√âTHODES PRIV√âES DE VALIDATION =====

    def _validate_priority(self, priority: int) -> None:
        """
        Valide que la priorit√© est dans la plage autoris√©e.

        Args:
            priority (int): Priorit√© √† valider

        Raises:
            InvalidPriorityError: Si la priorit√© n'est pas entre 1 et 5
        """
        if not isinstance(priority, int) or priority < 1 or priority > 5:
            raise InvalidPriorityError(priority=priority, valid_range="1-5")
