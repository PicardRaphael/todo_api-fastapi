"""
Interface TodoRepository - Couche Domain (Clean Architecture)

Cette interface d√©finit le contrat pour la persistance des entit√©s Todo.
Elle appartient √† la couche Domain mais ne conna√Æt AUCUN d√©tail d'impl√©mentation.

Pattern Repository :
- Encapsule la logique d'acc√®s aux donn√©es
- Permet de changer de base de donn√©es sans impacter la logique m√©tier
- Facilite les tests unitaires avec des mocks
- Respecte le principe d'inversion de d√©pendance (DIP)

Impl√©mentations possibles :
- SQLiteRepository (actuellement utilis√©e)
- PostgreSQLRepository (future)
- MongoDBRepository (future)
- InMemoryRepository (pour les tests)

S√©curit√© int√©gr√©e :
- Toutes les m√©thodes incluent l'owner_id pour l'isolation des donn√©es
- Aucune m√©thode ne permet d'acc√©der aux todos d'autres utilisateurs
"""

from abc import ABC, abstractmethod
from typing import List, Optional

from src.domain.entities.todo import Todo


class TodoRepository(ABC):
    """
    Interface abstraite d√©finissant les op√©rations de persistance pour les entit√©s Todo.

    Cette interface suit le pattern Repository de la Clean Architecture :

    Avantages :
    - D√©couplage total entre la logique m√©tier et la persistance
    - Facilite le changement de base de donn√©es (SQLite ‚Üí PostgreSQL ‚Üí MongoDB)
    - Permet les tests unitaires avec des mocks/stubs
    - Respecte le principe d'inversion de d√©pendance (DIP)

    S√©curit√© :
    - Toutes les op√©rations incluent la notion de propri√©taire (owner_id)
    - Isolation stricte des donn√©es entre utilisateurs
    - Aucune m√©thode ne permet l'acc√®s cross-utilisateur

    Impl√©mentations :
    - SQLiteTodoRepository : Impl√©mentation actuelle avec SQLAlchemy
    - Futures : PostgreSQL, MongoDB, Redis, etc.
    """

    # ===== M√âTHODES CRUD DE BASE =====

    @abstractmethod
    async def get_all(self) -> List[Todo]:
        """
        R√©cup√®re toutes les t√¢ches (sans filtrage par utilisateur).

        ‚ö†Ô∏è ATTENTION : Cette m√©thode est utilis√©e pour l'administration uniquement.
        Pour les utilisateurs normaux, utilisez get_all_by_owner().

        Returns:
            List[Todo]: Liste de toutes les t√¢ches du syst√®me
        """
        pass

    @abstractmethod
    async def get_by_id(self, todo_id: int) -> Optional[Todo]:
        """
        R√©cup√®re une t√¢che par son identifiant unique.

        ‚ö†Ô∏è ATTENTION : Cette m√©thode ne v√©rifie PAS le propri√©taire.
        Pour les utilisateurs normaux, utilisez get_by_id_and_owner().

        Args:
            todo_id (int): L'identifiant unique de la t√¢che

        Returns:
            Optional[Todo]: La t√¢che si trouv√©e, None sinon
        """
        pass

    @abstractmethod
    async def create(self, todo: Todo) -> Todo:
        """
        Cr√©e une nouvelle t√¢che dans le syst√®me de persistance.

        L'ID de la t√¢che doit √™tre None en entr√©e et sera g√©n√©r√© automatiquement
        par le syst√®me de persistance (auto-increment en base de donn√©es).

        Args:
            todo (Todo): L'entit√© Todo √† cr√©er (avec id=None)

        Returns:
            Todo: La t√¢che cr√©√©e avec son ID g√©n√©r√© et tous les champs persist√©s

        Raises:
            ValueError: Si todo.id n'est pas None
            Exception: En cas d'erreur de persistance
        """
        pass

    @abstractmethod
    async def update(self, todo_id: int, todo: Todo) -> Optional[Todo]:
        """
        Met √† jour une t√¢che existante avec de nouvelles donn√©es.

        Utilise la technique du "partial update" : seuls les champs fournis
        dans l'entit√© todo sont mis √† jour (exclude_unset=True).

        Args:
            todo_id (int): L'identifiant de la t√¢che √† mettre √† jour
            todo (Todo): L'entit√© contenant les nouvelles donn√©es

        Returns:
            Optional[Todo]: La t√¢che mise √† jour si trouv√©e, None si inexistante

        Note:
            Cette m√©thode ne v√©rifie PAS le propri√©taire.
            Utilisez les use cases pour la logique de s√©curit√©.
        """
        pass

    @abstractmethod
    async def delete(self, todo_id: int) -> bool:
        """
        Supprime d√©finitivement une t√¢che du syst√®me.

        ‚ö†Ô∏è SUPPRESSION D√âFINITIVE : Cette action est irr√©versible.

        Args:
            todo_id (int): L'identifiant de la t√¢che √† supprimer

        Returns:
            bool: True si la suppression a r√©ussi, False si la t√¢che n'existait pas

        Note:
            Cette m√©thode ne v√©rifie PAS le propri√©taire.
            Utilisez les use cases pour la logique de s√©curit√©.
        """
        pass

    # ===== M√âTHODES AVEC S√âCURIT√â INT√âGR√âE =====

    @abstractmethod
    async def get_all_by_owner(self, owner_id: int) -> List[Todo]:
        """
        R√©cup√®re toutes les t√¢ches appartenant √† un utilisateur sp√©cifique.

        üõ°Ô∏è S√âCURIT√â : Cette m√©thode garantit l'isolation des donn√©es.
        Chaque utilisateur ne voit que ses propres t√¢ches.

        Args:
            owner_id (int): L'identifiant de l'utilisateur propri√©taire

        Returns:
            List[Todo]: Liste des t√¢ches de l'utilisateur (peut √™tre vide)

        Note:
            Retourne une liste vide si l'utilisateur n'a aucune t√¢che.
        """
        pass

    @abstractmethod
    async def get_by_id_and_owner(self, todo_id: int, owner_id: int) -> Optional[Todo]:
        """
        R√©cup√®re une t√¢che par son ID ET son propri√©taire.

        üõ°Ô∏è S√âCURIT√â : Cette m√©thode est la version s√©curis√©e de get_by_id().
        Elle garantit qu'un utilisateur ne peut acc√©der qu'√† ses propres t√¢ches.

        Args:
            todo_id (int): L'identifiant de la t√¢che
            owner_id (int): L'identifiant du propri√©taire

        Returns:
            Optional[Todo]: La t√¢che si trouv√©e ET appartenant √† l'utilisateur, None sinon

        Cas de retour None :
            - La t√¢che n'existe pas
            - La t√¢che existe mais appartient √† un autre utilisateur
        """
        pass
